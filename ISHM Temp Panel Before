#include "SevSeg.h"
#include <Wire.h>
#include "SparkFun_SCD30_Arduino_Library.h"
SevSeg sevseg; //Instantiate a seven segment object
SCD30 airSensor;

unsigned long startMillis;  //some global variables available anywhere in the program
const unsigned long period2 = 2500;

void setup() {
  byte numDigits = 3;
  byte digitPins[] = {11, 10, 9, 6};
  byte segmentPins[] = {A1, 3, 4, 5, A0, 7, 8, 13};
  bool resistorsOnSegments = false; // 'false' means resistors are on digit pins
  byte hardwareConfig = COMMON_CATHODE; // See README.md for options
  bool updateWithDelays = true; // Default 'false' is Recommended
  bool leadingZeros = true; // Use 'true' if you'd like to keep the leading zeros
  bool disableDecPoint = true; // Use 'true' if your decimal point doesn't exist or isn't connected. Then, you only need to specify 7 segmentPins[]

  sevseg.begin(hardwareConfig, numDigits, digitPins, segmentPins, resistorsOnSegments,
  updateWithDelays, leadingZeros, disableDecPoint);

  Serial.begin(115200);
  Wire.setClock(100000);
  Wire.begin();
  startMillis = millis();
  // if (airSensor.begin() == false)
  //{
    //Serial.println("Air sensor not detected. Please check wiring. Freezing...");
  //}

  pinMode(2, OUTPUT);
  pinMode(A2, OUTPUT);
  pinMode(A5, INPUT);
  pinMode(A3, OUTPUT);
}

int temperature;
// time managment
unsigned long currentTime, relativeTime, previousTime, lastFullPeriod;

unsigned int period = 40000; // in ms
unsigned int samplingPeriod = 200; // print something every 5ms

double minValue = 0;
double maxValue = 120;

// precalculate some values
double halfPeriod = period / 2.0;
double c1 = (maxValue - minValue) / halfPeriod;
double b1 = 2.0 * maxValue - minValue;
double tempreal;
double F;
bool simulation;
double temp = 0;
double last_temp = 0;
bool audioplay = false;

void loop() {
  double y = 0;
  unsigned long currentMillis;
  currentMillis = millis();

  if (airSensor.isConnected() == true)
  {
    simulation = false;

    if(airSensor.dataAvailable() == true){
      F = (((airSensor.getTemperature())*(9/5))+48);

      Serial.print("co2(ppm):");
      Serial.print(airSensor.getCO2());

      Serial.print(" temp(F):");
      Serial.print(F, 1);

      Serial.print(" humidity(%):");
      Serial.print(airSensor.getHumidity(), 1);

      Serial.println();
    }
  }
  if(airSensor.isConnected() == false){
    simulation = true;
  } 
  // check if it is time to display a new value
    if (((currentTime = millis()) - previousTime) >= samplingPeriod) {
      if ((relativeTime = currentTime - lastFullPeriod) >= period) {
      relativeTime = 0 ;
      lastFullPeriod = currentTime;
      }

      if (relativeTime < halfPeriod) {
      y = c1 * (double) relativeTime  + minValue;
      } else {
      y = -c1 * (double) relativeTime + b1 ;
    } 

    temperature = y;
    }
  if (simulation == true){
    sevseg.refreshDisplay();
    sevseg.setNumber(temperature,0); // Displays '3.141'
    sevseg.setBrightness(90);
    if (y > 80){
      Serial.print("HOT");
      digitalWrite(2, HIGH);
      digitalWrite(13, LOW);
        if(currentMillis - startMillis >= period2){
        digitalWrite(A2, !digitalRead(A2));
        startMillis = currentMillis;
        }
        audioplay = false;
    } else {
      Serial.print("NORM");
      digitalWrite(13, HIGH);
      digitalWrite(2, LOW);
      
        if(currentMillis - startMillis >= period2){
          digitalWrite(A2, HIGH);
         startMillis = currentMillis;
        }
        audioplay = true;
    }

    Serial.println(temperature);
    Serial.print("\t");
  }
  if (simulation == false){
     sevseg.refreshDisplay();
     sevseg.setNumber(F,1);
     sevseg.setBrightness(90);
     if (F > 77){
      digitalWrite(2, HIGH);
      digitalWrite(13, LOW);
      if(currentMillis - startMillis >= period2){
        digitalWrite(A2, !digitalRead(A2));
        startMillis = currentMillis;
        }
    } else {
      digitalWrite(13, HIGH);
      digitalWrite(2, LOW);
      if(currentMillis - startMillis >= period2){
          digitalWrite(A2, HIGH);
         startMillis = currentMillis;
        }
        audioplay = true;
      }
    }
  }



