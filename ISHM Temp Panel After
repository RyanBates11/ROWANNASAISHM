#include "SevSeg.h"
#include <Wire.h>
#include "SparkFun_SCD30_Arduino_Library.h"
SevSeg sevseg;
SCD30 airSensor;

unsigned long startMillis;  //some global variables available anywhere in the program
const unsigned long period2 = 2500;

unsigned long currentTime, relativeTime, previousTime, lastFullPeriod;
unsigned int period = 40000; // in ms
unsigned int samplingPeriod = 200; // print something every 5ms

double minValue = 0;
double maxValue = 120;
double halfPeriod = period / 2.0;
double c1 = (maxValue - minValue) / halfPeriod;
double b1 = 2.0 * maxValue - minValue;

void setup(){
  byte numDigits = 3;
  byte digitPins[] = {11, 10, 9, 6};
  byte segmentPins[] = {A1, 3, 4, 5, A0, 7, 8, 13};
  bool resistorsOnSegments = false; // 'false' means resistors are on digit pins
  byte hardwareConfig = COMMON_CATHODE; // See README.md for options
  bool updateWithDelays = true; // Default 'false' is Recommended
  bool leadingZeros = true; // Use 'true' if you'd like to keep the leading zeros
  bool disableDecPoint = true; // Use 'true' if your decimal point doesn't exist or isn't connected. Then, you only need to specify 7 segmentPins[]
  sevseg.begin(hardwareConfig, numDigits, digitPins, segmentPins, resistorsOnSegments,
  updateWithDelays, leadingZeros, disableDecPoint);
  Serial.begin(115200);

  Wire.setClock(100000);
  Wire.begin();

  startMillis = millis();
  pinMode(2, OUTPUT);
  pinMode(A2, OUTPUT);
  pinMode(A5, INPUT);
  pinMode(A3, OUTPUT);

}
int temperatureSim;
double F;
int count = 0;
bool simulation;

void loop() {
  simulation = true;
 //if(airSensor.isConnected() == true){
   // simulation = false;
  //}
  //if(airSensor.isConnected() == false){
    //simulation = true;
  //}

  double y = 0;
  unsigned long currentMillis;
  currentMillis = millis();
  // put your main code here, to run repeatedly:
  //if(airSensor.isConnected() == true){
    //if(airSensor.dataAvailable() == true){
      //F = (((airSensor.getTemperature())*(9/5))+48);
    //}
  
 
    if (((currentTime = millis()) - previousTime) >= samplingPeriod) {
      if ((relativeTime = currentTime - lastFullPeriod) >= period) {
      relativeTime = 0 ;
      lastFullPeriod = currentTime;
      }

      if (relativeTime < halfPeriod) {
      y = c1 * (double) relativeTime  + minValue;
      } else {
      y = -c1 * (double) relativeTime + b1 ;
    } 
    temperatureSim = y;
   }
  
   if(simulation == true){
      if(temperatureSim < 80){
      digitalWrite(2, LOW);
      digitalWrite(13, HIGH);
    }
      if(temperatureSim > 80){
      digitalWrite(2, HIGH);
      digitalWrite(13, LOW);
      digitalWrite(A2, HIGH);
    }

     //Serial.print(F);
      Serial.println(temperatureSim);
      sevseg.refreshDisplay();
      sevseg.setNumber(temperatureSim,1);
      sevseg.setBrightness(90);
   }
}
